{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\nimport { c as componentOnReady, o as debounce } from './helpers-1457892a.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n// Join the non empty segments with \"/\".\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...path], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\n// Remove the prefix segments from the path segments.\n//\n// Return:\n// - null when the path segments do not start with the passed prefix,\n// - the path segments after the prefix otherwise.\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const path = parsePath(pathname).segments;\n  return removePrefix(prefix, path);\n};\n// Parses the path to:\n// - segments an array of '/' separated parts,\n// - queryString (undefined when no query string).\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substr(qsStart + 1);\n      path = path.substr(0, qsStart);\n    }\n    segments = path.split('/')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n// Returns whether the given redirect matches the given path segments.\n//\n// A redirect matches when the segments of the path and redirect.from are equal.\n// Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n// The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\nconst matchesRedirect = (path, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > path.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== path[i]) {\n      return false;\n    }\n  }\n  return from.length === path.length;\n};\n// Returns the first redirect matching the path segments or undefined when no match found.\nconst findRouteRedirect = (path, redirects) => {\n  return redirects.find(redirect => matchesRedirect(path, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      /**\n       * Only compare routes with the chain that have the same number of parameters.\n       */\n      if (routeIdParams.length === routeChain.path.length) {\n        /**\n         * Maps the route's params into a path based on the path variable names,\n         * to compare against the route chain format.\n         *\n         * Before:\n         * ```ts\n         * {\n         *  params: {\n         *    s1: 'a',\n         *    s2: 'b'\n         *  }\n         * }\n         * ```\n         *\n         * After:\n         * ```ts\n         * [':s1',':s2']\n         * ```\n         */\n        const pathWithParams = routeIdParams.map(key => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.path[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    return {\n      path: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\nconst flattenNode = (chain, chains, node) => {\n  chain = chain.slice();\n  chain.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getPath());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setPath(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getPath();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    let parsedPath = parsePath(url);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  // This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes.\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && findRouteRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  // This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes.\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments, queryString } = redirect.to;\n      this.setPath(segments, direction, queryString);\n      redirectFrom = redirect.from;\n      path = segments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  // Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n  //\n  // When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n  // Otherwise the beforeEnterHook hook of the target route is executed.\n  async runGuards(to = this.getPath(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = routerPathToChain(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"sourceRoot":"webpack:///","file":"29-es5.js"}