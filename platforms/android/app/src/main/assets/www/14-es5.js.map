{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\nimport { s as sanitizeDOMString } from './index-9e3fe806.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nconst InfiniteScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n    this.position = 'bottom';\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n      const infiniteHeight = this.el.offsetHeight;\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n      const distanceFromInfinite = (this.position === 'bottom')\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n        : scrollTop - infiniteHeight - threshold;\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      }\n      else {\n        this.didFire = false;\n      }\n      return 4;\n    };\n  }\n  thresholdChanged() {\n    const val = this.threshold;\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = (parseFloat(val) / 100);\n    }\n    else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n  disabledChanged() {\n    const disabled = this.disabled;\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n    this.enableScrollEvents(!disabled);\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    this.scrollEl = await contentEl.getScrollElement();\n    this.thresholdChanged();\n    this.disabledChanged();\n    if (this.position === 'top') {\n      writeTask(() => {\n        if (this.scrollEl) {\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n        }\n      });\n    }\n  }\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n  async complete() {\n    const scrollEl = this.scrollEl;\n    if (!this.isLoading || !scrollEl) {\n      return;\n    }\n    this.isLoading = false;\n    if (this.position === 'top') {\n      /**\n       * New content is being added at the top, but the scrollTop position stays the same,\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n       * (Frame 1)\n       *    - complete() is called, but the UI hasn't had time to update yet.\n       *    - Save the current content dimensions.\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\n       * (Frame 2)\n       *    - Read the new content dimensions.\n       *    - Calculate the height difference and the new scroll position.\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n       * (Still frame 2, if I'm correct)\n       *    - Change the scroll position (= visually maintain the scroll position).\n       *    - Change the state to re-enable the InfiniteScroll.\n       *    - This should be after changing the scroll position, or it could\n       *    cause the InfiniteScroll to be triggered again immediately.\n       * (Frame 3)\n       *    Done.\n       */\n      this.isBusy = true;\n      // ******** DOM READ ****************\n      // Save the current content dimensions before the UI updates\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n      // ******** DOM READ ****************\n      requestAnimationFrame(() => {\n        readTask(() => {\n          // UI has updated, save the new content dimensions\n          const scrollHeight = scrollEl.scrollHeight;\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n          const newScrollTop = scrollHeight - prev;\n          // ******** DOM WRITE ****************\n          requestAnimationFrame(() => {\n            writeTask(() => {\n              scrollEl.scrollTop = newScrollTop;\n              this.isBusy = false;\n            });\n          });\n        });\n      });\n    }\n  }\n  canStart() {\n    return (!this.disabled &&\n      !this.isBusy &&\n      !!this.scrollEl &&\n      !this.isLoading);\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      }\n      else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return (h(Host, { class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled\n      } }));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"threshold\": [\"thresholdChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n};\nInfiniteScroll.style = infiniteScrollCss;\n\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst InfiniteScrollContent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  componentDidLoad() {\n    if (this.loadingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        // Used internally for styling\n        [`infinite-scroll-content-${mode}`]: true\n      } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n  }\n};\nInfiniteScrollContent.style = {\n  ios: infiniteScrollContentIosCss,\n  md: infiniteScrollContentMdCss\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"],"sourceRoot":"webpack:///","file":"14-es5.js"}