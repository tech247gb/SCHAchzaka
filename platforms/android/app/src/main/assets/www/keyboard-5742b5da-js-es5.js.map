{"version":3,"sources":["node_modules/@ionic/core/dist/esm/keyboard-5742b5da.js"],"names":[],"mappings":"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","sourcesContent":["const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet keyboardOpen = false;\n/**\n * This is only used for tests\n */\nconst resetKeyboardAssist = () => {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\nconst startKeyboardAssist = (win) => {\n  startNativeListeners(win);\n  if (!win.visualViewport) {\n    return;\n  }\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n  win.visualViewport.onresize = () => {\n    trackViewportChanges(win);\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\n      setKeyboardOpen(win);\n    }\n    else if (keyboardDidClose(win)) {\n      setKeyboardClose(win);\n    }\n  };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\nconst startNativeListeners = (win) => {\n  win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\nconst setKeyboardOpen = (win, ev) => {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\nconst setKeyboardClose = (win) => {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accommodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\nconst keyboardDidOpen = () => {\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return (!keyboardOpen &&\n    previousVisualViewport.width === currentVisualViewport.width &&\n    scaledHeightDifference > KEYBOARD_THRESHOLD);\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\nconst keyboardDidResize = (win) => {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\nconst keyboardDidClose = (win) => {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Dispatch a keyboard open event\n */\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: { keyboardHeight }\n  });\n  win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\nconst fireKeyboardCloseEvent = (win) => {\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\nconst trackViewportChanges = (win) => {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\nconst copyVisualViewport = (visualViewport) => {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale\n  };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\n"],"sourceRoot":"webpack:///","file":"keyboard-5742b5da-js-es5.js"}